{"ast":null,"code":"import _slicedToArray from\"D:\\\\Documents\\\\Field-Benders-Website-Re\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useRef}from'react';import{Typography,Grid,Slider}from'@material-ui/core';import PlayArrow from'@material-ui/icons/PlayArrow';import Pause from'@material-ui/icons/Pause';import VolumeDownRounded from'@material-ui/icons/VolumeDownRounded';import VolumeUpRounded from'@material-ui/icons/VolumeUpRounded';import{useTheme}from'@material-ui/styles';import{useDispatch}from'react-redux';import{useHistory,useLocation}from'react-router-dom';import useStyles from'../styles';import{ToggleButton,ToggleButtonGroup}from'@material-ui/lab';import Player,{useAudio}from'../../../../Player/Player';//TODO change way of passing mapping data\n//TODO change wrapped player into own component, more compatability\nvar MusicPanel=function MusicPanel(_ref){var musicPlayer=_ref.musicPlayer,trackMap=_ref.trackMap;//console.log(track);\nvar theme=useTheme();var lightIconColor='blue';var classes=useStyles();//use a json file which maps the locations of mp3's to a name\nvar _useState=useState('none'),_useState2=_slicedToArray(_useState,2),song=_useState2[0],changeTrack=_useState2[1];var _useState3=useState('play'),_useState4=_slicedToArray(_useState3,2),songStatus=_useState4[0],changeSongStatus=_useState4[1];//load in the beggining track for the player \nconsole.log(trackMap);var playButtonRef=useRef();//const [playing, toggle] = useAudio(track);\nvar handleChange=function handleChange(event,state){};//const [playing, toggle] = useAudio(track);\n//const [audio] = useState(new Audio(track).play());\nvar handlePlayClick=function handlePlayClick(event){var playButtonState=playButtonRef.current.value;console.log(\"\".concat(song,\" set to \").concat(playButtonState));if(playButtonState=='play'){changeSongStatus('pause');//console.log(playing);\n}else{changeSongStatus('play');//toggle();\n};//handle further logic like track skipping\n/**\r\n         playButtonState = playButtonState == 'play' ? (\r\n             playButtonState == 'pause';\r\n             console.log('Play button state was changed to pause.');\r\n         ) : ();\r\n         * \r\n         */};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Grid,{container:true,direction:{xs:'column',md:'row',lg:'row'},spacing:2,justifyContent:'center'},/*#__PURE__*/React.createElement(Grid,{item:true},/*#__PURE__*/React.createElement(Typography,{variant:\"body1\",align:\"center\"},\"Music Status: \",songStatus),/*#__PURE__*/React.createElement(Typography,{variant:\"body1\",align:\"center\"},\"Track Title: \",song)),/*#__PURE__*/React.createElement(Grid,{item:true},/*#__PURE__*/React.createElement(Player,{url:trackMap[0].path,wrappedPlayer:/*#__PURE__*/React.createElement(ToggleButtonGroup,{orientation:\"horizontal\",value:\"default\",exclusive:true,onChange:handleChange,className:classes.playControls},/*#__PURE__*/React.createElement(ToggleButton,{value:songStatus,onClick:handlePlayClick,ref:playButtonRef},songStatus=='play'?/*#__PURE__*/React.createElement(PlayArrow,{sx:{width:'inherit',color:'black'},fontSize:\"small\",htmlColor:\"blue\"}):/*#__PURE__*/React.createElement(Pause,{fontSize:\"small\",htmlColor:\"blue\"})))})),/*#__PURE__*/React.createElement(Grid,{container:true},/*#__PURE__*/React.createElement(Slider,{className:classes.volumeComponent,\"aria-label\":\"Volume\",defaultValue:30,sx:{'& .MuiSlider-track':{border:'none'},'& .MuiSlider-thumb':{width:24,height:24,backgroundColor:'#fff','&:before':{boxShadow:'0 4px 8px rgba(0,0,0,0.4)'},'&:hover, &.Mui-focusVisible, &.Mui-active':{boxShadow:'none'}}}}))));};export default MusicPanel;/**\r\n * \r\n * \r\n         <Grid container direction={{xs:'column', md:'row'}} spacing={2}>\r\n            <Typography variant='body1' align='center'>Music Status: {songStatus}</Typography>\r\n            <Typography variant='body1' align= 'center'>Track Title: {song}</Typography>\r\n            <ToggleButtonGroup\r\n            orientation='horizontal'\r\n            value='default'\r\n            exclusive\r\n            onChange={handleChange}\r\n            className={classes.playControls}>\r\n                <ToggleButton value=\"play\" >\r\n                    <PlayArrow sx={{width:'inherit', color:'black'}} fontSize='small' htmlColor='blue'/>\r\n                </ToggleButton>\r\n                <ToggleButton value=\"pause\" >\r\n                    <Pause fontSize='small' htmlColor='blue'/>\r\n                </ToggleButton>\r\n            </ToggleButtonGroup>\r\n\r\n        </Grid>\r\n\r\n */","map":{"version":3,"names":["React","useState","useRef","Typography","Grid","Slider","PlayArrow","Pause","VolumeDownRounded","VolumeUpRounded","useTheme","useDispatch","useHistory","useLocation","useStyles","ToggleButton","ToggleButtonGroup","Player","useAudio","MusicPanel","musicPlayer","trackMap","theme","lightIconColor","classes","song","changeTrack","songStatus","changeSongStatus","console","log","playButtonRef","handleChange","event","state","handlePlayClick","playButtonState","current","value","xs","md","lg","path","playControls","width","color","volumeComponent","border","height","backgroundColor","boxShadow"],"sources":["D:/Documents/Field-Benders-Website-Re/client/src/components/Chapters/Chapter/ControlPanel/MusicPanel/MusicPanel.js"],"sourcesContent":["\r\nimport React, {useState, useRef} from 'react';\r\n\r\nimport { Typography, Grid, Slider} from '@material-ui/core';\r\n\r\n\r\nimport PlayArrow from'@material-ui/icons/PlayArrow';\r\nimport Pause from '@material-ui/icons/Pause';\r\nimport VolumeDownRounded from '@material-ui/icons/VolumeDownRounded';\r\nimport VolumeUpRounded  from '@material-ui/icons/VolumeUpRounded';\r\nimport { useTheme } from '@material-ui/styles';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\n\r\n\r\nimport useStyles from '../styles';\r\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\r\n\r\nimport Player, {useAudio} from '../../../../Player/Player';\r\n\r\n//TODO change way of passing mapping data\r\n//TODO change wrapped player into own component, more compatability\r\n\r\nconst MusicPanel = ({musicPlayer, trackMap}) => {\r\n    //console.log(track);\r\n    const theme = useTheme();\r\n    const lightIconColor = 'blue';\r\n\r\n    const classes = useStyles();\r\n    //use a json file which maps the locations of mp3's to a name\r\n    const [song, changeTrack] = useState('none');\r\n    const [songStatus, changeSongStatus] = useState('play');\r\n    \r\n    //load in the beggining track for the player \r\n    console.log(trackMap);\r\n\r\n    const playButtonRef = useRef();\r\n    //const [playing, toggle] = useAudio(track);\r\n\r\n    const handleChange = (event, state) => {\r\n        \r\n    }\r\n\r\n    //const [playing, toggle] = useAudio(track);\r\n    //const [audio] = useState(new Audio(track).play());\r\n    \r\n    const handlePlayClick = (event) => {\r\n        let playButtonState = playButtonRef.current.value;\r\n        console.log(`${song} set to ${playButtonState}`);\r\n        if (playButtonState == 'play') {\r\n            changeSongStatus('pause');\r\n            //console.log(playing);\r\n        }\r\n        else {\r\n            changeSongStatus('play')\r\n            //toggle();\r\n        };\r\n        //handle further logic like track skipping\r\n        \r\n        /**\r\n         playButtonState = playButtonState == 'play' ? (\r\n             playButtonState == 'pause';\r\n             console.log('Play button state was changed to pause.');\r\n         ) : ();\r\n         * \r\n         */\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n\r\n            <Grid container direction={{xs: 'column', md: 'row', lg: 'row'}} spacing={2} justifyContent={'center'}>\r\n\r\n                <Grid item>\r\n                    <Typography variant='body1' align='center'>Music Status: {songStatus}</Typography>\r\n                    <Typography variant='body1' align= 'center'>Track Title: {song}</Typography>\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                    <Player url={trackMap[0].path} wrappedPlayer={    \r\n                        <ToggleButtonGroup\r\n                        orientation='horizontal'\r\n                        value='default'\r\n                        exclusive\r\n                        onChange={handleChange}\r\n                        className={classes.playControls}>\r\n                            <ToggleButton  value={songStatus} onClick={handlePlayClick} ref={playButtonRef}>\r\n                                {songStatus == 'play' ? (\r\n                                    <PlayArrow sx={{width:'inherit', color:'black'}} fontSize='small' htmlColor='blue'/>\r\n                                ):(<Pause fontSize='small' htmlColor='blue'/ >\r\n                                )}\r\n                            </ToggleButton>\r\n                        </ToggleButtonGroup> \r\n                        }/>\r\n                        </Grid>\r\n                        \r\n                <Grid container>\r\n\r\n                    <Slider\r\n                        className={classes.volumeComponent}\r\n                        aria-label=\"Volume\"\r\n                        defaultValue={30}\r\n                        sx={{\r\n                        '& .MuiSlider-track': {\r\n                            border: 'none',\r\n                        },\r\n                        '& .MuiSlider-thumb': {\r\n                            width: 24,\r\n                            height: 24,\r\n                            backgroundColor: '#fff',\r\n                            '&:before': {\r\n                            boxShadow: '0 4px 8px rgba(0,0,0,0.4)',\r\n                            },\r\n                            '&:hover, &.Mui-focusVisible, &.Mui-active': {\r\n                            boxShadow: 'none',\r\n                            },\r\n                        },\r\n                        }}\r\n                    />    \r\n                </Grid>\r\n                        \r\n\r\n\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MusicPanel;\r\n\r\n/**\r\n * \r\n * \r\n         <Grid container direction={{xs:'column', md:'row'}} spacing={2}>\r\n            <Typography variant='body1' align='center'>Music Status: {songStatus}</Typography>\r\n            <Typography variant='body1' align= 'center'>Track Title: {song}</Typography>\r\n            <ToggleButtonGroup\r\n            orientation='horizontal'\r\n            value='default'\r\n            exclusive\r\n            onChange={handleChange}\r\n            className={classes.playControls}>\r\n                <ToggleButton value=\"play\" >\r\n                    <PlayArrow sx={{width:'inherit', color:'black'}} fontSize='small' htmlColor='blue'/>\r\n                </ToggleButton>\r\n                <ToggleButton value=\"pause\" >\r\n                    <Pause fontSize='small' htmlColor='blue'/>\r\n                </ToggleButton>\r\n            </ToggleButtonGroup>\r\n\r\n        </Grid>\r\n\r\n */"],"mappings":"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"},"metadata":{},"sourceType":"module"}