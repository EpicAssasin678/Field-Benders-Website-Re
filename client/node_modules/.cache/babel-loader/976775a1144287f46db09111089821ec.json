{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\Field-Benders-Website-Re\\\\client\\\\src\\\\components\\\\Chapters\\\\Chapter\\\\ControlPanel\\\\MusicPanel\\\\MusicPanel.js\";\nimport React, { useState, useRef } from 'react';\nimport { Typography, Grid, Container, Slider } from '@material-ui/core';\nimport { useTheme } from '@material-ui/styles';\nimport { ListItemIcon, ListIcon, PlayArrow, Pause } from '@material-ui/icons';\nimport { VolumeDownRounded, VolumeUpRounded } from '@mateial-ui/icons';\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\nimport { useDispatch } from 'react-redux';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport useStyles from '../styles';\nimport Player, { useAudio } from '../../../../Player/Player';\n\n//TODO change way of passing mapping data\n//TODO change wrapped player into own component, more compatability\n\nconst MusicPanel = _ref => {\n  let {\n    musicPlayer,\n    trackMap\n  } = _ref;\n  //console.log(track);\n  const lightIconColor = theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.4)' : 'rgba(0,0,0,0.4)';\n  const classes = useStyles();\n  //use a json file which maps the locations of mp3's to a name\n  const [song, changeTrack] = useState('none');\n  const [songStatus, changeSongStatus] = useState('play');\n\n  //load in the beggining track for the player \n\n  console.log(trackMap);\n  const playButtonRef = useRef();\n\n  //const [playing, toggle] = useAudio(track);\n\n  const handleChange = (event, state) => {};\n\n  //const [playing, toggle] = useAudio(track);\n  //const [audio] = useState(new Audio(track).play());\n\n  const handlePlayClick = event => {\n    let playButtonState = playButtonRef.current.value;\n    console.log(`${song} set to ${playButtonState}`);\n    if (playButtonState == 'play') {\n      changeSongStatus('pause');\n      //console.log(playing);\n    } else {\n      changeSongStatus('play');\n      //toggle();\n    }\n    ;\n    //handle further logic like track skipping\n\n    /**\r\n     playButtonState = playButtonState == 'play' ? (\r\n         playButtonState == 'pause';\r\n         console.log('Play button state was changed to pause.');\r\n     ) : ();\r\n     * \r\n     */\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: {\n      xs: 'column',\n      md: 'row',\n      lg: 'row'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body1\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }, \"Music Status: \", songStatus), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body1\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, \"Track Title: \", song), /*#__PURE__*/React.createElement(Player, {\n    url: trackMap[0].path,\n    wrappedPlayer: /*#__PURE__*/React.createElement(ToggleButtonGroup, {\n      orientation: \"horizontal\",\n      value: \"default\",\n      exclusive: true,\n      onChange: handleChange,\n      className: classes.playControls,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ToggleButton, {\n      value: songStatus,\n      onClick: handlePlayClick,\n      ref: playButtonRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 25\n      }\n    }, songStatus == 'play' ? /*#__PURE__*/React.createElement(PlayArrow, {\n      sx: {\n        width: 'inherit',\n        color: 'black'\n      },\n      fontSize: \"small\",\n      htmlColor: \"blue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 33\n      }\n    }) : /*#__PURE__*/React.createElement(Pause, {\n      fontSize: \"small\",\n      htmlColor: \"blue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 32\n      }\n    }))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(VolumeDownRounded, {\n    htmlColor: lightIconColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Slider, {\n    \"aria-label\": \"Volume\",\n    defaultValue: 30,\n    sx: {\n      color: theme.palette.mode === 'dark' ? '#fff' : 'rgba(0,0,0,0.87)',\n      '& .MuiSlider-track': {\n        border: 'none'\n      },\n      '& .MuiSlider-thumb': {\n        width: 24,\n        height: 24,\n        backgroundColor: '#fff',\n        '&:before': {\n          boxShadow: '0 4px 8px rgba(0,0,0,0.4)'\n        },\n        '&:hover, &.Mui-focusVisible, &.Mui-active': {\n          boxShadow: 'none'\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(VolumeUpRounded, {\n    htmlColor: lightIconColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }\n  }))));\n};\nexport default MusicPanel;\n\n/**\r\n * \r\n * \r\n         <Grid container direction={{xs:'column', md:'row'}} spacing={2}>\r\n            <Typography variant='body1' align='center'>Music Status: {songStatus}</Typography>\r\n            <Typography variant='body1' align= 'center'>Track Title: {song}</Typography>\r\n            <ToggleButtonGroup\r\n            orientation='horizontal'\r\n            value='default'\r\n            exclusive\r\n            onChange={handleChange}\r\n            className={classes.playControls}>\r\n                <ToggleButton value=\"play\" >\r\n                    <PlayArrow sx={{width:'inherit', color:'black'}} fontSize='small' htmlColor='blue'/>\r\n                </ToggleButton>\r\n                <ToggleButton value=\"pause\" >\r\n                    <Pause fontSize='small' htmlColor='blue'/>\r\n                </ToggleButton>\r\n            </ToggleButtonGroup>\r\n\r\n        </Grid>\r\n\r\n */","map":{"version":3,"names":["React","useState","useRef","Typography","Grid","Container","Slider","useTheme","ListItemIcon","ListIcon","PlayArrow","Pause","VolumeDownRounded","VolumeUpRounded","ToggleButton","ToggleButtonGroup","useDispatch","useHistory","useLocation","useStyles","Player","useAudio","MusicPanel","musicPlayer","trackMap","lightIconColor","theme","palette","mode","classes","song","changeTrack","songStatus","changeSongStatus","console","log","playButtonRef","handleChange","event","state","handlePlayClick","playButtonState","current","value","xs","md","lg","path","playControls","width","color","border","height","backgroundColor","boxShadow"],"sources":["D:/Documents/Field-Benders-Website-Re/client/src/components/Chapters/Chapter/ControlPanel/MusicPanel/MusicPanel.js"],"sourcesContent":["\r\nimport React, {useState, useRef} from 'react';\r\n\r\nimport { Typography, Grid, Container, Slider} from '@material-ui/core';\r\nimport { useTheme } from '@material-ui/styles';\r\nimport {ListItemIcon, ListIcon, PlayArrow, Pause } from '@material-ui/icons';\r\nimport {VolumeDownRounded, VolumeUpRounded } from '@mateial-ui/icons';\r\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\n\r\n\r\n\r\nimport useStyles from '../styles';\r\n\r\nimport Player, {useAudio} from '../../../../Player/Player';\r\n\r\n//TODO change way of passing mapping data\r\n//TODO change wrapped player into own component, more compatability\r\n\r\nconst MusicPanel = ({musicPlayer, trackMap}) => {\r\n    //console.log(track);\r\n    const lightIconColor = theme.palette.mode === 'dark' ? 'rgba(255,255,255,0.4)' : 'rgba(0,0,0,0.4)';\r\n\r\n    const classes = useStyles();\r\n    //use a json file which maps the locations of mp3's to a name\r\n    const [song, changeTrack] = useState('none');\r\n    const [songStatus, changeSongStatus] = useState('play');\r\n    \r\n    //load in the beggining track for the player \r\n\r\n    console.log(trackMap);\r\n    \r\n    \r\n    const playButtonRef = useRef();\r\n\r\n    //const [playing, toggle] = useAudio(track);\r\n\r\n    const handleChange = (event, state) => {\r\n        \r\n    }\r\n\r\n    //const [playing, toggle] = useAudio(track);\r\n    //const [audio] = useState(new Audio(track).play());\r\n    \r\n    const handlePlayClick = (event) => {\r\n\r\n        let playButtonState = playButtonRef.current.value;\r\n        console.log(`${song} set to ${playButtonState}`);\r\n        if (playButtonState == 'play') {\r\n            changeSongStatus('pause');\r\n            //console.log(playing);\r\n        }\r\n        else {\r\n            changeSongStatus('play')\r\n            //toggle();\r\n        };\r\n        //handle further logic like track skipping\r\n            \r\n        \r\n        /**\r\n         playButtonState = playButtonState == 'play' ? (\r\n             playButtonState == 'pause';\r\n             console.log('Play button state was changed to pause.');\r\n         ) : ();\r\n         * \r\n         */\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n\r\n        <Container >\r\n            <Grid container direction={{xs: 'column', md: 'row', lg: 'row'}} >\r\n\r\n                <Typography variant='body1' align='center'>Music Status: {songStatus}</Typography>\r\n                <Typography variant='body1' align= 'center'>Track Title: {song}</Typography>\r\n                \r\n                <Player url={trackMap[0].path} wrappedPlayer={    \r\n                    <ToggleButtonGroup\r\n                    orientation='horizontal'\r\n                    value='default'\r\n                    exclusive\r\n                    onChange={handleChange}\r\n                    className={classes.playControls}>\r\n                        <ToggleButton  value={songStatus} onClick={handlePlayClick} ref={playButtonRef}>\r\n                            {songStatus == 'play' ? (\r\n                                <PlayArrow sx={{width:'inherit', color:'black'}} fontSize='small' htmlColor='blue'/>\r\n                            ):(<Pause fontSize='small' htmlColor='blue'/ >\r\n                            )}\r\n                        </ToggleButton>\r\n                    </ToggleButtonGroup> \r\n                    }/>\r\n\r\n                    <VolumeDownRounded htmlColor={lightIconColor} />\r\n                    <Slider\r\n                      aria-label=\"Volume\"\r\n                      defaultValue={30}\r\n                      sx={{\r\n                        color: theme.palette.mode === 'dark' ? '#fff' : 'rgba(0,0,0,0.87)',\r\n                        '& .MuiSlider-track': {\r\n                          border: 'none',\r\n                        },\r\n                        '& .MuiSlider-thumb': {\r\n                          width: 24,\r\n                          height: 24,\r\n                          backgroundColor: '#fff',\r\n                          '&:before': {\r\n                            boxShadow: '0 4px 8px rgba(0,0,0,0.4)',\r\n                          },\r\n                          '&:hover, &.Mui-focusVisible, &.Mui-active': {\r\n                            boxShadow: 'none',\r\n                          },\r\n                        },\r\n                      }}\r\n                    />\r\n                    <VolumeUpRounded htmlColor={lightIconColor} />\r\n\r\n            </Grid>\r\n        </Container>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MusicPanel;\r\n\r\n/**\r\n * \r\n * \r\n         <Grid container direction={{xs:'column', md:'row'}} spacing={2}>\r\n            <Typography variant='body1' align='center'>Music Status: {songStatus}</Typography>\r\n            <Typography variant='body1' align= 'center'>Track Title: {song}</Typography>\r\n            <ToggleButtonGroup\r\n            orientation='horizontal'\r\n            value='default'\r\n            exclusive\r\n            onChange={handleChange}\r\n            className={classes.playControls}>\r\n                <ToggleButton value=\"play\" >\r\n                    <PlayArrow sx={{width:'inherit', color:'black'}} fontSize='small' htmlColor='blue'/>\r\n                </ToggleButton>\r\n                <ToggleButton value=\"pause\" >\r\n                    <Pause fontSize='small' htmlColor='blue'/>\r\n                </ToggleButton>\r\n            </ToggleButtonGroup>\r\n\r\n        </Grid>\r\n\r\n */"],"mappings":";AACA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,MAAM,QAAO,OAAO;AAE7C,SAASC,UAAU,EAAEC,IAAI,EAAEC,SAAS,EAAEC,MAAM,QAAO,mBAAmB;AACtE,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAAQC,YAAY,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,KAAK,QAAQ,oBAAoB;AAC5E,SAAQC,iBAAiB,EAAEC,eAAe,QAAQ,mBAAmB;AACrE,SAASC,YAAY,EAAEC,iBAAiB,QAAQ,kBAAkB;AAElE,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,UAAU,EAAEC,WAAW,QAAQ,kBAAkB;AAI1D,OAAOC,SAAS,MAAM,WAAW;AAEjC,OAAOC,MAAM,IAAGC,QAAQ,QAAO,2BAA2B;;AAE1D;AACA;;AAEA,MAAMC,UAAU,GAAG,QAA6B;EAAA,IAA5B;IAACC,WAAW;IAAEC;EAAQ,CAAC;EACvC;EACA,MAAMC,cAAc,GAAGC,KAAK,CAACC,OAAO,CAACC,IAAI,KAAK,MAAM,GAAG,uBAAuB,GAAG,iBAAiB;EAElG,MAAMC,OAAO,GAAGV,SAAS,EAAE;EAC3B;EACA,MAAM,CAACW,IAAI,EAAEC,WAAW,CAAC,GAAG9B,QAAQ,CAAC,MAAM,CAAC;EAC5C,MAAM,CAAC+B,UAAU,EAAEC,gBAAgB,CAAC,GAAGhC,QAAQ,CAAC,MAAM,CAAC;;EAEvD;;EAEAiC,OAAO,CAACC,GAAG,CAACX,QAAQ,CAAC;EAGrB,MAAMY,aAAa,GAAGlC,MAAM,EAAE;;EAE9B;;EAEA,MAAMmC,YAAY,GAAG,CAACC,KAAK,EAAEC,KAAK,KAAK,CAEvC,CAAC;;EAED;EACA;;EAEA,MAAMC,eAAe,GAAIF,KAAK,IAAK;IAE/B,IAAIG,eAAe,GAAGL,aAAa,CAACM,OAAO,CAACC,KAAK;IACjDT,OAAO,CAACC,GAAG,CAAE,GAAEL,IAAK,WAAUW,eAAgB,EAAC,CAAC;IAChD,IAAIA,eAAe,IAAI,MAAM,EAAE;MAC3BR,gBAAgB,CAAC,OAAO,CAAC;MACzB;IACJ,CAAC,MACI;MACDA,gBAAgB,CAAC,MAAM,CAAC;MACxB;IACJ;IAAC;IACD;;IAGA;AACR;AACA;AACA;AACA;AACA;AACA;EACI,CAAC;;EAED,oBACI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAEA,oBAAC,SAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACN,oBAAC,IAAI;IAAC,SAAS;IAAC,SAAS,EAAE;MAACW,EAAE,EAAE,QAAQ;MAAEC,EAAE,EAAE,KAAK;MAAEC,EAAE,EAAE;IAAK,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAE5D,oBAAC,UAAU;IAAC,OAAO,EAAC,OAAO;IAAC,KAAK,EAAC,QAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,qBAAgBd,UAAU,CAAc,eAClF,oBAAC,UAAU;IAAC,OAAO,EAAC,OAAO;IAAC,KAAK,EAAE,QAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,oBAAeF,IAAI,CAAc,eAE5E,oBAAC,MAAM;IAAC,GAAG,EAAEN,QAAQ,CAAC,CAAC,CAAC,CAACuB,IAAK;IAAC,aAAa,eACxC,oBAAC,iBAAiB;MAClB,WAAW,EAAC,YAAY;MACxB,KAAK,EAAC,SAAS;MACf,SAAS;MACT,QAAQ,EAAEV,YAAa;MACvB,SAAS,EAAER,OAAO,CAACmB,YAAa;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBAC5B,oBAAC,YAAY;MAAE,KAAK,EAAEhB,UAAW;MAAC,OAAO,EAAEQ,eAAgB;MAAC,GAAG,EAAEJ,aAAc;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAC1EJ,UAAU,IAAI,MAAM,gBACjB,oBAAC,SAAS;MAAC,EAAE,EAAE;QAACiB,KAAK,EAAC,SAAS;QAAEC,KAAK,EAAC;MAAO,CAAE;MAAC,QAAQ,EAAC,OAAO;MAAC,SAAS,EAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAE,gBACrF,oBAAC,KAAK;MAAC,QAAQ,EAAC,OAAO;MAAC,SAAS,EAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAC1C,CACU,CAElB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAE,eAEH,oBAAC,iBAAiB;IAAC,SAAS,EAAEzB,cAAe;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,eAChD,oBAAC,MAAM;IACL,cAAW,QAAQ;IACnB,YAAY,EAAE,EAAG;IACjB,EAAE,EAAE;MACFyB,KAAK,EAAExB,KAAK,CAACC,OAAO,CAACC,IAAI,KAAK,MAAM,GAAG,MAAM,GAAG,kBAAkB;MAClE,oBAAoB,EAAE;QACpBuB,MAAM,EAAE;MACV,CAAC;MACD,oBAAoB,EAAE;QACpBF,KAAK,EAAE,EAAE;QACTG,MAAM,EAAE,EAAE;QACVC,eAAe,EAAE,MAAM;QACvB,UAAU,EAAE;UACVC,SAAS,EAAE;QACb,CAAC;QACD,2CAA2C,EAAE;UAC3CA,SAAS,EAAE;QACb;MACF;IACF,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EACF,eACF,oBAAC,eAAe;IAAC,SAAS,EAAE7B,cAAe;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,CAE/C,CACC,CAEN;AAEd,CAAC;AAED,eAAeH,UAAU;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}